[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ha-config-tools"
version = "1.0.0"
description = "Home Assistant configuration management and validation tools"
authors = [
    {name = "Home Assistant Config Management"}
]
requires-python = ">=3.11"
dependencies = [
    "homeassistant>=2024.1.0",
    "voluptuous>=0.14.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "isort>=5.12.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pylint>=3.0.0",
    "pre-commit>=3.6.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "types-PyYAML>=6.0.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | config
  | temp
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["tools"]
extend_skip_glob = ["venv/*", "config/*", "temp/*"]

# Note: flake8 configuration is in .flake8 file (doesn't support pyproject.toml)

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
# Relaxed settings for existing codebase
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_return_any = false
# Turn off strict requirements
allow_untyped_globals = true
allow_redefinition = true
# Useful warnings (but not strict)
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "homeassistant.*",
    "voluptuous.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "too-many-ancestors",
    "too-many-nested-blocks",
    "duplicate-code",
    "fixme",
    "unused-import",
    "unused-argument",
    "unused-variable",
    "broad-exception-caught",
    "subprocess-run-check",
    "unspecified-encoding",
    "unnecessary-pass",
    "line-too-long",
    "f-string-without-interpolation",
    "no-else-return",
    "bare-except",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 10
max-branches = 20
max-statements = 60

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=tools",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.codespell]
ignore-words-list = "hass"
